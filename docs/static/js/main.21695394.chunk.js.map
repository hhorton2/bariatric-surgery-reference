{
  "version": 3,
  "sources": [
    "components/Accordion.tsx",
    "components/PostOpDiet/WeekOneDetails.tsx",
    "components/PostOpDiet/WeekTwoDetails.tsx",
    "components/PostOpDiet/PostOpDiet.tsx",
    "App.tsx",
    "reportWebVitals.ts",
    "index.tsx"
  ],
  "names": [
    "Accordion",
    "props",
    "AccordionSummary",
    "expandIcon",
    "id",
    "Typography",
    "summary",
    "AccordionDetails",
    "children",
    "WeekOneDetails",
    "variant",
    "style",
    "fontWeight",
    "background",
    "TableContainer",
    "component",
    "Paper",
    "Table",
    "size",
    "TableHead",
    "TableRow",
    "TableCell",
    "TableBody",
    "sx",
    "border",
    "WeekTwoDetails",
    "PostOpDiet",
    "DrawerHeader",
    "styled",
    "theme",
    "display",
    "alignItems",
    "padding",
    "spacing",
    "mixins",
    "toolbar",
    "justifyContent",
    "App",
    "useTheme",
    "useState",
    "open",
    "setOpen",
    "postOpDietName",
    "openPage",
    "setOpenPage",
    "Box",
    "flexGrow",
    "AppBar",
    "position",
    "Toolbar",
    "IconButton",
    "edge",
    "color",
    "mr",
    "onClick",
    "Drawer",
    "width",
    "flexShrink",
    "boxSizing",
    "anchor",
    "direction",
    "Divider",
    "List",
    "map",
    "text",
    "index",
    "ListItem",
    "button",
    "ListItemText",
    "primary",
    "marginTop",
    "reportWebVitals",
    "onPerfEntry",
    "Function",
    "then",
    "getCLS",
    "getFID",
    "getFCP",
    "getLCP",
    "getTTFB",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.21695394.chunk.js",
  "sourcesContent": [
    "import {\n  Accordion as MUIAccordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from \"@mui/material\";\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\nimport React from \"react\";\n\nexport type AccordionProps = {\n  children?: JSX.Element | undefined;\n  summary: string;\n};\nexport default function Accordion(props: AccordionProps): JSX.Element {\n  return (\n    <MUIAccordion>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}\n        aria-controls=\"panel1a-content\"\n        id=\"panel1a-header\"\n      >\n        <Typography>{props.summary}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>{props.children}</AccordionDetails>\n    </MUIAccordion>\n  );\n}\n",
    "import {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\n\nexport default function WeekOneDetails(): JSX.Element {\n  return (\n    <>\n      <Typography variant={\"h6\"}>Full Liquids</Typography>\n      <Typography variant={\"subtitle1\"}>\n        <span style={{ fontWeight: \"bold\" }}>Goal:</span> Protect the small\n        stomach pouch,{\" \"}\n        <span style={{ background: \"yellow\" }}>STAY HYDRATED</span>\n      </Typography>\n      <Typography variant={\"subtitle1\"}>\n        <span style={{ fontWeight: \"bold\" }}> Guidelines: </span>\n      </Typography>\n      <Typography variant={\"subtitle1\"}>\n        When you go home from the hospital, your first priority is to drink\n        enough fluid to prevent dehydration. Remember that protein drinks count\n        as liquids.\n      </Typography>\n      <Typography variant={\"body1\"}>\n        <ul>\n          <li>\n            Start with 1-2 oz. per feeding & progress to 4 oz. per meal by the\n            2nd week, as tolerated.\n          </li>\n          <li>\n            Gradually increase protein intake, as tolerated, to a goal of 60-80\n            grams daily. You may include a Protein supplement 1-2 times a day\n            during this phase of your diet.\n          </li>\n          <li>\n            Between meals, sip on non-carbonated, calorie-free, caffeine-free\n            liquids; 2-3 oz. at a time.\n          </li>\n          <li>\n            Combining all liquids, you should aim for a minimum of 64 oz. (8\n            cups) fluid daily.\n          </li>\n          <li>\n            Consume at least 60 grams protein and 64 ounces of liquids every 24\n            hours\n          </li>\n        </ul>\n      </Typography>\n      <Typography variant={\"subtitle1\"}>\n        It is not uncommon to feel a sensation of fullness from liquids after\n        surgery. This may limit your ability or desire to take the goal volumes\n        in the first several days after surgery. As you progress, you should\n        find it easier to meet the daily goals. For best tolerance, do not use\n        straws, take small sips, and start with room temperature liquids.\n      </Typography>\n      <br />\n      <TableContainer component={Paper}>\n        <Table size={\"small\"} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Food Category</TableCell>\n              <TableCell>Foods Recommended</TableCell>\n              <TableCell>Foods NOT Recommended</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Thin clear & full liquids </TableCell>\n              <TableCell>\n                <ul>\n                  <li>Fat-free milk</li>\n                  <li>unsweetened almond milk</li>\n                  <li>soy milk</li>\n                  <li>no sugar added fruit icies & popsicles</li>\n                  <li>\n                    sugar-free low-fat puddings low fat yogurt (no fruit pieces)\n                  </li>\n                  <li>\n                    sugar free Jell-O Protein water/shakes vegetable juice\n                  </li>\n                  <li>\n                    Unsweetened fruit juices (limit fruit juice to 4 ounces per\n                    day)\n                  </li>\n                  <li>\n                    Crystal Light or equivalent/Propel water with lemon or lime\n                    juice\n                  </li>\n                  <li>\n                    Chicken/Beef broth, Bone Broth, strained cream-based soups\n                    (protein powder may be added to soups to increase protein).\n                  </li>\n                  <li>\n                    Runny Cream of wheat/creamed potatoes/runny grits (must be\n                    so thin they will run off the spoon)\n                  </li>\n                </ul>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>Sugar-sweetened liquids</li>\n                  <li>whole milk</li>\n                  <li>sweetened condensed milk</li>\n                  <li>chocolate milk made with added sugar</li>\n                  <li>carbonated beverages</li>\n                  <li>sugar-sweetened popsicles or fruit ices</li>\n                  <li>milkshakes</li>\n                  <li>sugar-sweetened fruit smoothies</li>\n                  <li>ice cream</li>\n                  <li>sherbet</li>\n                  <li>frozen yogurt</li>\n                  <li>alcohol</li>\n                  <li>spicy drinks</li>\n                  <li>caffeine</li>.\n                </ul>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n}\n",
    "import {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\n\nexport default function WeekTwoDetails(): JSX.Element {\n  return (\n    <>\n      <Typography variant={\"h6\"}>Add Pureed Foods</Typography>\n      <Typography variant={\"subtitle1\"}>\n        <span style={{ fontWeight: \"bold\" }}>Goal: </span>\n        Allow the new stomach anatomy to adjust\n      </Typography>\n      <Typography variant={\"subtitle1\"}>\n        <span style={{ fontWeight: \"bold\" }}> Guidelines: </span>\n      </Typography>\n      <Typography variant={\"body1\"}>\n        <ul>\n          <li>\n            Eat only 6 meals per day. You may continue a protein supplement 1-2\n            times a day\n          </li>\n          <li>\n            You may progress to 2-4 ounces (4-8 Tbsp.) of pureed food per\n            feeding.\n          </li>\n          <li>Avoid all foods that require chewing.</li>\n          <li>\n            Eat your protein food or dairy food first, followed by a fruit or\n            vegetable.\n          </li>\n          <li>\n            Between meals, sip on non-carbonated, calorie-free, caffeine-free\n            liquids; 4-6 oz. at a time.\n          </li>\n          <li>\n            Stop drinking liquids 30 minutes before and after mealtimes to allow\n            stomach to empty.\n          </li>\n          <li>\n            Eat or drink less than the suggested amounts or stop eating/drinking\n            if you begin to feel discomfort.\n          </li>\n          <li>\n            By now you should start your vitamin/mineral supplements, add your\n            calcium supplement.\n          </li>\n          <li>\n            You are to take in at least 60 grams of protein and at least 64\n            ounces of fluids throughout the day.\n          </li>\n        </ul>\n      </Typography>\n      <hr />\n      <br />\n      <TableContainer component={Paper}>\n        <Table size={\"small\"} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Food Category</TableCell>\n              <TableCell>Foods Recommended</TableCell>\n              <TableCell>Foods NOT Recommended</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Soups</TableCell>\n              <TableCell>\n                <ul>\n                  <li>Egg drop soup</li>\n                  <li>Reduced-fat cream soups</li>\n                  <li>Broth</li>\n                  <li>Bouillon</li>\n                </ul>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>Regular cream soups</li>\n                  <li>Soups with whole meats and vegetables</li>\n                </ul>\n              </TableCell>\n            </TableRow>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Breads/ starches</TableCell>\n              <TableCell>\n                <ul>\n                  <li>Cooked, refined/strained cereals</li>\n                  <li>Mashed potatoes without skin</li>\n                  <li>Grits</li>\n                  <li>Plain oatmeal</li>\n                </ul>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>Bread</li>\n                  <li>Rice</li>\n                  <li>Pasta</li>\n                </ul>\n              </TableCell>\n            </TableRow>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Vegetables</TableCell>\n              <TableCell>\n                <ul>\n                  <li>Pureed/mashed vegetables</li>\n                </ul>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>Whole vegetables</li>\n                  <li>Raw vegetables</li>\n                  <li>Vegetables with seeds or hulls</li>\n                </ul>\n              </TableCell>\n            </TableRow>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Fruits</TableCell>\n              <TableCell>\n                <ul>\n                  <li>Unsweetened applesauce</li>\n                  <li>Pureed or mashed \"lite\" or juice-packed canned fruits</li>\n                  <li>Pureed or mashed banana</li>\n                  <li>Other pureed fruit without seeds or hulls</li>\n                </ul>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>Sugar sweetened fruit</li>\n                  <li>Fruit packed in heavy syrup</li>\n                  <li>Raw fruit</li>\n                  <li>Fruit skins, seeds, or hulls</li>\n                </ul>\n              </TableCell>\n            </TableRow>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Meat/Protein/Protein Substitutes</TableCell>\n              <TableCell>\n                <ul>\n                  <li>Pureed/mashed skinless chicken or fish</li>\n                  <li>Low-fat cottage cheese</li>\n                  <li>Mashed or pureed tofu</li>\n                  <li>Pureed or mashed egg or egg substitute</li>\n                  <li>Chicken salad or tuna salad in food processor</li>\n                  <li>Smoothies with protein</li>\n                </ul>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>Regular whole meats</li>\n                  <li>Fried meats</li>\n                  <li>Fried eggs</li>\n                  <li>Whole milk cottage cheese</li>\n                </ul>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <br />\n      <Typography variant={\"subtitle1\"}>\n        Using a food processor or blender, food may be blended with liquid.\n        Fruits, vegetables, meats, casseroles, and cereals from the table can be\n        used.\n      </Typography>\n      <br />\n      <Typography variant={\"subtitle1\"}>\n        Liquids that may be added to foods to get them to a pureed form:\n      </Typography>\n      <Typography variant={\"body1\"}>\n        <ul>\n          <li>Broth</li>\n          <li>Low-fat creamed soup</li>\n          <li>Skim milk</li>\n          <li>Low-fat thin gravies</li>\n          <li>\n            Salt, flavoring extracts, and some spices may be added for flavor,\n            as tolerated\n          </li>\n        </ul>\n      </Typography>\n      <hr />\n      <Typography variant={\"subtitle1\"}>Hints for blending foods:</Typography>\n      <Typography variant={\"body1\"}>\n        <ul>\n          <li>Warm meats, vegetables, or potatoes before blending</li>\n          <li>Chop meat finely before blending</li>\n          <li>\n            Use blended or strained meat and blend with gravy or cream soups\n          </li>\n          <li>Blend vegetables with cream soups</li>\n          <li>\n            Blend fruits with light cottage cheese, add fruit juice if needed to\n            be thin\n          </li>\n          <li>\n            Well-cooked green beans, carrots, peas can be mashed and do not have\n            to be pureed/blended.\n          </li>\n          <li>\n            Low fat ricotta cheese with low sugar marinara sauce heats up in a\n            microwave or oven for a \"lasagna\" taste.\n          </li>\n          <li>\n            You can get a lot of protein and nutrients from making your own\n            pureed foods. Boil your meats and/or vegetables in chicken stock.\n            You may use seasonings. Use a food processor for best results. Be\n            Creative! Chicken and butternut squash, banana and avocado, roast\n            beef and carrots or sweet potatoes.\n          </li>\n        </ul>\n      </Typography>\n      <hr />\n      <Typography variant={\"h6\"}>Puree Phase Sample Menu</Typography>\n      <br />\n      <TableContainer component={Paper}>\n        <Table size={\"small\"} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Meal</TableCell>\n              <TableCell>Regular</TableCell>\n              <TableCell>Lactose Free</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Breakfast</TableCell>\n              <TableCell>\n                <ul>\n                  <li>2 Tbsp. mashed soft scrambled egg</li>\n                  <li>2 Tbsp. oatmeal + 4 Tbsp. HIGH PROTEIN MILK</li>\n                  <li>1 tsp. butter</li>\n                </ul>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>1 mashed soft scrambled egg</li>\n                  <li>2 Tbsp. oatmeal made with water or soy milk,</li>\n                  <li>1 tsp. butter</li>\n                  <li>2 Tbsp. mashed \"lite\" or juice-packed fruit</li>\n                </ul>\n              </TableCell>\n            </TableRow>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Mid-Morning Snack</TableCell>\n              <TableCell>\n                <Typography variant={\"body2\"}>\n                  High Protein Shake: Blend\n                </Typography>\n                <ul>\n                  <li>1 packet No Sugar Added Instant Breakfast drink mix</li>\n                  <li>8 oz. HIGH PROTEIN MILK.</li>\n                  <li>1 small frozen banana</li>\n                </ul>\n                <Typography variant={\"body2\"} sx={{ fontWeight: \"bold\" }}>\n                  Consume in 2-4 portions of 2-4 oz.\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>8 oz. Commercial Protein Shake</li>\n                  <li>1 oz. Commercial Liquid Protein Concentrate</li>\n                </ul>\n                <Typography variant={\"body2\"} sx={{ fontWeight: \"bold\" }}>\n                  Consume in 2-4 portions of 2-4 oz.\n                </Typography>\n              </TableCell>\n            </TableRow>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Lunch</TableCell>\n              <TableCell>\n                <ul>\n                  <li>¼ cup mashed reduced-fat cottage cheese</li>\n                  <li>¼ cup mashed \"lite\" or juice-packed fruit</li>\n                </ul>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>¼ cup mashed canned chicken</li>\n                  <li>2 Tbsp. cream potatoes</li>\n                  <li>1 tsp. butter</li>\n                  <li>2 Tbsp. mashed \"lite\" or juice packed fruit</li>\n                </ul>\n              </TableCell>\n            </TableRow>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Mid-Afternoon Snack</TableCell>\n              <TableCell>\n                <ul>\n                  <li>\n                    1 cup HIGH PROTEIN PUDDING (use recipe from mid morning\n                    snack)\n                  </li>\n                </ul>\n                <Typography variant={\"body2\"} sx={{ fontWeight: \"bold\" }}>\n                  Consume in 2 portions of 4 oz.\n                </Typography>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>8 oz. Commercial Protein Shake</li>\n                </ul>\n                <Typography variant={\"body2\"} sx={{ fontWeight: \"bold\" }}>\n                  Consume in 2 portions of 4 oz.\n                </Typography>\n              </TableCell>\n            </TableRow>\n            <TableRow\n              sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n            >\n              <TableCell>Dinner</TableCell>\n              <TableCell>\n                <ul>\n                  <li>¼ cup flavored tuna mashed with 1 tsp. mayo</li>\n                  <li>2 Tbsp. mashed green beans with 1 tsp butter</li>\n                  <li>2 Tbsp. applesauce</li>\n                </ul>\n              </TableCell>\n              <TableCell>\n                <ul>\n                  <li>¼ cup flavored tuna mashed with 1 tsp. mayo</li>\n                  <li>2 Tbsp. mashed green beans with ½ tsp butter</li>\n                  <li>2 Tbsp. applesauce</li>\n                </ul>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n}\n",
    "import React from \"react\";\nimport Accordion from \"../Accordion\";\nimport WeekOneDetails from \"./WeekOneDetails\";\nimport WeekTwoDetails from \"./WeekTwoDetails\";\n\nexport default function PostOpDiet(): JSX.Element {\n    return (\n        <>\n            <Accordion summary={\"Week 1\"}>\n                <WeekOneDetails/>\n            </Accordion>\n            <Accordion summary={\"Week 2\"}>\n                <WeekTwoDetails/>\n            </Accordion>\n            <Accordion summary={\"Week 3 and 4\"}></Accordion>\n            <Accordion summary={\"1 Month\"}></Accordion>\n            <Accordion summary={\"2 Months and Beyond\"}></Accordion>\n        </>\n    );\n}\n",
    "import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {\n  AppBar,\n  Box,\n  IconButton,\n  List,\n  Toolbar,\n  Typography,\n} from \"@mui/material\";\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport Drawer from \"@mui/material/Drawer\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport PostOpDiet from \"./components/PostOpDiet/PostOpDiet\";\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Divider from \"@mui/material/Divider\";\n\nconst DrawerHeader = styled(\"div\")(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  padding: theme.spacing(0, 1),\n  // necessary for content to be below app bar\n  ...theme.mixins.toolbar,\n  justifyContent: \"flex-end\",\n}));\n\nfunction App() {\n  const theme = useTheme();\n  const [open, setOpen] = useState(false);\n  const postOpDietName = \"Post-op Diet\";\n  const [openPage, setOpenPage] = useState(postOpDietName);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            size=\"large\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            sx={{ mr: 2 }}\n            onClick={handleDrawerOpen}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            {openPage}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        sx={{\n          width: 240,\n          flexShrink: 0,\n          \"& .MuiDrawer-paper\": {\n            width: 240,\n            boxSizing: \"border-box\",\n          },\n        }}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n      >\n        <DrawerHeader>\n          <Typography>Navigation</Typography>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"ltr\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </DrawerHeader>\n        <Divider />\n        <List>\n          {[postOpDietName].map((text, index) => (\n            <ListItem\n              button\n              key={text}\n              onClick={() => {\n                setOpenPage(text);\n                setOpen(false);\n              }}\n            >\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n      <div style={{ marginTop: 5 }}>\n        {openPage === postOpDietName && <PostOpDiet />}\n      </div>\n    </Box>\n  );\n}\n\nexport default App;\n",
    "import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
    "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"
  ],
  "sourceRoot": ""
}